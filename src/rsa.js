

// generate sk pk and pk generated by sk
// consider pk as address
let fs = require('fs');
let EC = require('elliptic').ec;

// Create and initialize EC context
// (better do it once and reuse it)
let ec = new EC('secp256k1');
// Generate keys
let keypair = ec.genKeyPair();

function getPub(sk){
  return ec.keyFromPrivate(sk).getPublic('hex').toString()
}
// generate sk pk



function generateKeys(){
  const filename = './wallet.json'
  try {
    let res = JSON.parse(fs.readFileSync(filename))
    console.log(res.sk, res.pk);
        console.log(res.sk && res.pk && getPub(res.sk)==res.pk);
    if(res.sk && res.pk && getPub(res.sk)==res.pk){
      keypair = ec.keyFromPrivate(res.sk)
      console.log('now');
      return res
    }else {
      throw 'not valid wallet.json'
    }
  } catch (e) {
    // not exist? generate
    console.log(e);
    const res = {
      sk: keypair.getPrivate('hex').toString(),
      pk: keypair.getPublic('hex').toString(),
    }
    fs.writeFileSync(filename, JSON.stringify(res))
      console.log("generate");
  }

}
// signature
function sign({from, to, amount}){
  const bufferMsg = Buffer.from(`${from}-${to}-${amount}`)
  let signature = Buffer.from(keypair.sign(bufferMsg).toDER()).toString('hex')
  return signature
}
// verify
function verify({from, to, amount, signature}, pk){
  const keypairTemp = ec.keyFromPublic(pk,'hex')
  const bufferMsg = Buffer.from(`${from}-${to}-${amount}`)
  return keypairTemp.verify(bufferMsg,signature)
}

//console.log(res);

const keys = generateKeys()
console.log(keys)

const trans = {from:'aa',to:'bb',amount:100}
const signature = sign(trans)
console.log(signature)
trans.signature = signature
const isVerify = verify(trans,keys.pk)
console.log(isVerify);
